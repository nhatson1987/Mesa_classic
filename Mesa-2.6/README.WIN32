
Mesa/Readme.win32 - 2/8/98 - Theodore A. Jump - tjump@spgs.com

*** Legalese

These build files are provided as-is and are submitted to be included with
the "Mesa 3-D Graphics Library" package as (currently) maintained by Brian
Paul. These project build files are free software; you can redistribute it
and/or modify it under the terms of the GNU Library General Public License
as published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

These project files are distributed in the hope that they will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library
General Public License for more details.

You should have received a copy of the GNU Library General Public License
along with this library; if not, write to the Free Software Foundation,
Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

*** Maintenance Responsiblity and Technical Support

While these files are now part of the Mesa core distribution please do NOT
contact Mr. Paul for help with them if you encounter problems as he can't
help you (currently).  I will, however, attempt my straightforward best in
assisting anyone with using these files on their system.  I can NOT
guarantee instant responses owing to other responsiblities, but I do try
dang hard to answer any mail w/in 24 hours.  I may be contacted at the
above email address for the forseeable future.

-Ted
mailto://tjump@spgs.com
http://www.i21.com/~tjump

*** General Information

These build files facilitate convenient building of many variants of Mesa,
both as static link libraries (including mesaglu) and as dynamic link
libraries that in some cases may be used as "drop-in" replacements for
OpenGL32.DLL on both Windows95 and Windows NT.

The construction of the Win32 command-line build files and projects has
been something of a pet project of mine, and is based upon my own
"standard" Win32 build environment as supplied by the "nmake.mif" file.
They have been tested under Windows95 OSR2, Windows NT 4.0SP3, and Windows
NT 5.0 beta 1.  The libraries that they generated have been tested (via the
demo programs) in a *limited* fashion on the above three systems, including
the 3Dfx versions.

The reason I went with command-line build environment instead of the more
convenient IDE-based project files is for two reasons: 1. These appear to
have some amount of portability between versions (the nmake syntax hasn't
changed much since Microsoft C 7.0) while the IDE project files seem to
change drastically each version. and 2. These are readable with any ascii
editor and such are better self-documentation of the file relationships for
more people such that it will facilitate supporting other Win32 compilers.

(2/8/98 - I've added VC5 workspace files for the major stuff and some
representative samples for each of the test programs, but not all.)

While these files only deal with building for x86 targeted code it *should*
be possible to add the necessary logic to them to build for the other MSVC
supported CPU targets, I simply have no hardware to test them on nor the
alternative compilers to build with.

*** File Manifest

    --- command line build files ---

    .\win32\nmake.mak
    .\win32\nmake.mif
    .\win32\rules\lib.aux32
    .\win32\rules\lib.fxmesa32
    .\win32\rules\lib.fxmesaglu32
    .\win32\rules\lib.fxmesaglut32
    .\win32\rules\lib.fxmesatk32
    .\win32\rules\lib.glu32
    .\win32\rules\lib.glut32
    .\win32\rules\lib.mesa
    .\win32\rules\lib.mesa.core
    .\win32\rules\lib.mesa32
    .\win32\rules\lib.mesaaux
    .\win32\rules\lib.mesaaux.core
    .\win32\rules\lib.mesaaux32
    .\win32\rules\lib.mesaglu
    .\win32\rules\lib.mesaglu.core
    .\win32\rules\lib.mesaglu32
    .\win32\rules\lib.mesaglut.core
    .\win32\rules\lib.mesaglut32
    .\win32\rules\lib.mesatk
    .\win32\rules\lib.mesatk.core
    .\win32\rules\lib.mesatk32
    .\win32\rules\lib.opengl32
    .\win32\rules\lib.s3mesa32
    .\win32\rules\lib.tk32
    .\win32\rules\progs.3dfx.demos
    .\win32\rules\progs.3dfx.demos.fire
    .\win32\rules\progs.3dfx.demos.teapot
    .\win32\rules\progs.3dfx.demos.tunnel
    .\win32\rules\progs.book
    .\win32\rules\progs.demos
    .\win32\rules\progs.samples

    --- DevStudio project workspace files ---

    .\win32\mesademos-3dfx.dsw
    .\win32\mesademos-book.dsw
    .\win32\mesademos-demos.dsw
    .\win32\mesademos-samples.dsw
    .\win32\aux32.dsp
    .\win32\fxmesa32.dsp
    .\win32\glu32.dsp
    .\win32\glut32.dsp
    .\win32\mesa.dsp
    .\win32\mesa32.aps
    .\win32\mesa32.dsp
    .\win32\mesaaux.dsp
    .\win32\mesaaux32.dsp
    .\win32\mesaglu.dsp
    .\win32\mesaglu32.dsp
    .\win32\mesaglut32.dsp
    .\win32\mesalib.dsw
    .\win32\mesatk.dsp
    .\win32\mesatk32.dsp
    .\win32\opengl32.dsp
    .\win32\s3mesa32.dsp
    .\win32\tk32.dsp
    .\win32\3dfx\tunnel.dsp
    .\win32\book\accanti.dsp
    .\win32\book\teapots.dsp
    .\win32\demos\bounce.dsp
    .\win32\demos\gears.dsp
    .\win32\samples\olympic.dsp

*** Prerequisites for use

1. You must have a 32-bit Microsoft compiler installed. I have tested this
with Visual C 5.0 (SP3) and Visual C 4.0, but with minor (possibly no)
modification to the nmake.mak and nmake.mif files this sequence should work
on Visual C 2.0 also. The workspace files (mesalib.dsw and mesademos-*.dsw)
and their included project files (*.dsp) are specific to the DevStudio IDE
- I have made no attempt at building a VC4 IDE project set as I do not use
that any more.  Note that the VC workspace files do use and are dependant
upon the nmake.mak and nmake.mif files for construction of definition
(*.DEF) and resource (*.RC) files.

2. You must have the PATH, INCLUDE, and LIB environment variables set
properly. With VC5 you can easily get this by executing the VCVARS32.BAT
file that was created for you upon installation. It is found in the
DevStudio\VC\BIN directory, wherever you installed DevStudio. VC4 provides
a similar batch file in it's BIN directory also.

3. (optional) If you're going to build for 3Dfx/Voodoo you will need to
have previously installed the Glide SDK version 2.3 or later, if I
recall. This may be retrieved from www.3dfx.com for no money and some
download time. ;-) These build files assume that you have the Glide SDK
added to the respective environment variables (LIB and INCLUDE).

4. (optional) If you're goint to build for S3/Virge you will need the S3
Developers Toolkit which may be downloaded from www.s3.com for the price of
registering on-line and some time. NOTE: I can build the s3mesa.dll file to
completion, however the compilation of s3mesa.c currently generates a large
amount of compiler warnings and between that and the fact that I can not at
all test it I can make no claims to it's ability to execute.  Again, like
the 3Dfx version before this, these build files assume you have the S3Dtk H
and LIB files in the path of their respective environment variables.

5. (optional) Some of the "cleanup" processes will not work too well unless
you have the UNIX command equivalent to "rm" available.  If you wish to
generate automatic diffs of any changes you make, you will additionally
need GNU tar, gzip, and diff.  Personally, I advocate using the ports done
via the GNU-Win32 project (http://www.cygnus.com/misc/gnu-win32/) currently
supported by Cygnus Support (www.cygnus.com).  Additionally, some of the
cleanup commands will not completely run on Win95 owing to inherent
limitations of COMMAND.COM. To my knowledge this causes no problems, the
upshot is that if you ask it to clean up it won't be able to remove all of
the executable files that are stuffed back into the various demo and sample
directories.

I advise putting any include and lib files for secondary toolkits (Glide,
S3Tk, whatever) in their respective environment variables *before* the
Microsoft-assigned default values.

*** Important Notes and Changing Default values

- The currently configured Mesa version is 2.6, and MesaDemos version is
2.6. To change this permanently you will need to edit NMAKE.MAK and change
the lines that look like this (they start o/a line 116):

    # Currently, Mesa is at rev 2.6 ...
    #
    !IF "$(MESAVER)" == ""
    MESAVER=2.6
    !ENDIF

    # used in building all of the resource files for the Mesa DLLs
    #
    !IF "$(MESAFILEVER)" == ""
    MESAFILEVER=2,6,0,0
    !ENDIF

    # Currently, MesaDemos are at rev 2.6 ..
    #
    !IF "$(MESADEMOVER)" == ""
    MESADEMOVER=2.6
    !ENDIF

    # used in building all of the resource files for the Aux & Tk DLLs
    #
    !IF "$(MESADEMOFILEVER)" == ""
    MESADEMOFILEVER=2,6,0,0
    !ENDIF

- Currently the build files are configured to be used from a Win32
directory that is included inside the main Mesa-2.6 heirarchy.

- The build files are smart enough to find the files for Aux, Tk, and the
various demo programs if they are unpacked in the current Mesa-2.6
heirarchy or in a companion Mesa-2.5 heirarchy *along side* the Mesa-2.6
directory tree, in other words both this:

    \Mesa-2.6
    \Mesa-2.6\src
    \Mesa-2.6\src-glu
    \Mesa-2.6\src-glut
    \Mesa-2.6\Win32
    \Mesa-2.6\src-aux
    \Mesa-2.6\src-tk
    \Mesa-2.6\samples
    ...

    ... and this ...

    \Mesa-2.6
    \Mesa-2.6\src
    \Mesa-2.6\src-glu
    \Mesa-2.6\src-glut
    \Mesa-2.6\Win32
    \Mesa-2.5\src-aux
    \Mesa-2.5\src-tk
    \Mesa-2.5\samples
    ...

    ... should work.  This arose because my initial build tests for
    the demo files were done before MesaDemos 2.6 had been released.

- To enable use of MMX instructions by the VC5 compiler you may add the
"USE_MMX=1" option to the NMAKE command line, or edit the default in the
NMAKE.MAK file.  This does appear to have some affect on the performance on
the library and does not seem to harm it in any way *but* I have done *no*
verification of this. I have an MMX processor so I figured what the
heck. This option is only available with VC5 when building from the command
line.

- To build all files against MSVCRT.DLL instead of the statically linked
LIBC.LIB you may specify "USE_CRTDLL=1" on the NMAKE command line, or edit
the default in the NMAKE.MAK file. This can save some file size, however in
my checks it is a minimal savings on the Mesa libraries and not worth the
requirement for MSVCRT.DLL be installed on the end-user's system.  The
biggest saving for all of the test programs, in file-size that is, is to
link them against the DLL build lib files. This results in each executable
being a few tens of Kb instead of ~500kb.

- The 3Dfx build of Mesa has primarily been tested with Quake 2 and it runs
fine on my PC (take that for what you want it)...

- I can not test the S3 build as I have no machines available with Virge
based display cards.

- The multithreaded test code is *not* built as it requires pthreads and I
have as of yet spent not time trying to get that running. The latest word
that I saw WRT threading support on win32 was that they are intending to
support it natively within Win32 - so I'm waiting it out until they get it
done.

- Similarly, the 'xdemos' are not currently built because I haven't gotten
around to building the client libs for native win32 and getting it all
setup for use.

- The OpenGL32.DLL, GLU32.DLL, GLUT32.DLL, Aux32.DLL, and Tk32.DLL files
are alias builds, for conveniences, of the Mesa32.DLL, MesaGLU32.DLL,
MesaGLUT32.DLL, MesaAux32.DLL, and MesaTK32.DLL. The demo files are linked
against the prior set to facilitate them working with different OpenGL
driver files (e.g.: you can copy in the fxMesa32.DLL or s3Mesa32.DLL if you
want).  Some of the demo programs will NOT work without Mesa itself, they
will not work with standard OpenGL drivers that is, because they require
entrypoints into the DLL that are only availabe with Mesa (WMesaxxx).

*** Output Files

All files are generated and, with the exception of the executable images,
are copied in the the "root intermediate file directory" upon
completion. This upshot of this is that if you build everything in it's
default settings you end up with a copy of all .LIB and .DLL files
generated in ".\win32\release" and these may then be copied to more
permanent places for use in your own programs.

The executable images are copied back to their own source directories so
that they may find any local data files necessary (texture maps, surface
maps, whatever) upon execution.  Note that since they are linked against
DLL files you will either need to add the .\win32\release directory to you
path before execution or copy the respective DLL files form .\win32\release
to somewhere in your path.

Because I'm anal about my computer and it's organization, and I like to
prevent collision between builds, each of the subprojects has their own
intermediate file directory inside .\win32\release (for example, when
building mesa.lib all of it's intermediate files will be found in
.\win32\release\lib.mesa).  This makes it very easy to cleanup as you only
need to remove .\win32\release.

*** Okay, Enough, how do I build with this stuff already Ted!

Okay, no major calamity here. The basic way to use the project file is to
call it via NMAKE from the command line. The format is:

    nmake[.exe] /f nmake.mak [options] [target]

The most likely [options] values you will use may be any combination
of the following:

    DEBUG=1 or DEBUG=0
    USE_MMX=1 or USE_MMX=0
    USE_CRTDLL=1 or USE_CRTDLL=0

    Note that all three of these options are OFF by default.

The [target] includes but is not limited to the following (for full details
please peruse the NMAKE.MAK and NMAKE.MIF files - but be warned that
NMAKE.MIF is rather large and sometimes hard to follow):

    --- convenience targets ---

	all                 - builds everything
	libfiles            - builds all linking library files
	progs               - builds all executable images

    --- library files, static and dynamic ---

    mesa                - static lib build of Mesa core.
    mesaglu             - static lib build of MesaGLU core.
    mesaaux             - static lib build of Mesa Aux core.
    mesatk              - static lib build of Mesa Tk core
    mesaglut            - static lib build of Mesa GLUT core.

    mesa32, mesaglu32,
    mesaaux32, mesatk32,
    mesaglut32          - dynamic lib build each lib

    opengl32, glu32, aux32,
    tk32, glut32        - alias builds of each lib that allow for
                          convenient replacement of the base opengl32.dll
                          with the 3Dfx or S3 builds.

    --- hardware accelerated mesa builds ---

    fxmesa32            - builds Mesa for use on top of the 3Dfx
                          Glide runtime libs

    s3mesa32            - builds mesa for use on top of the S3
                          'S3Tk' runtime libs.

    --- executable images ---

    progs.book          - builds all programs in \book directory
    progs.demos         - builds all programs in \demos directory
    progs.samples       - builds all programs in \samples directory

        These generate all of the programs in their respective
        directories and link the executables against mesa32.dll,
        mesaglu32.dll, mesatk32.dll, and mesaaux32.dll and are thus
        hard-bound to the CPU-based image generation.

    progs.3dfx.demos    - builds all programs in \3dfx\demos directory

        The following program-generating targets link the executables
        against glut32.lib, glu32.lib, opengl32.lib, glide2x,lib,
        texus.lib, and winmm.lib and are thus NOT hard-bound to using
        Mesa per-se as you can simply replace the opengl32.dll file in
        use - but I would definately make sure whichever one I was using
        had hardware acceleration.


Some examples are in order ...

    ... build all static-link libs using MMX support:

        nmake /f nmake.mak USE_MMX=1 allstatic

    ... build all dynamic-link libs using MSVCRT.DLL for C runtime,
        also build with MMX support:

        nmake /f nmake.mak USE_MMX=1 USE_CRTDLL=1 alldynamic

    ... build all 3Dfx target DLL files with debugging support:

        nmake /f nmake.mak DEBUG=1 allfx

    ... To build all library variants and all test and demonstration
        programs with the default settings you do this:

        nmake /f nmake.mak all

    ... to build all static link libs and nothing else you do this:

        nmake /f nmake.mak allstatic

    ... to build all non-accelerated dynamic link libs you do this:

        nmake /f nmake.mak alldynamic

    ... to build all 3Dfx targeted dynamic link libs you do this:

        nmake /f nmake.mak allfx

    ... to build all S3 Virge targetd dynamic link libs you do this:

        nmake /f nmake.mak alls3

    ... to build all libraries, static and dynamic, in all versions
        you do this:

        nmake /f nmake.mak libfiles

    ... to subsequently build all demo and test programs you do this:

        nmake /f nmake.mak progs

    ... to cleanup all intermediate files you do this:

        nmake /f clean

You get the picture. (I hope) ;^)  You may also specify specify
single targets in a convenient fashion. The rule is simple, any of the
above named lib files, static or dynamic, may be built by providing it's
name on the command line as the target. Examples:

    ... to build only Mesa as OpenGL32.DLL ...

        nmake /f nmake.mak opengl32

    ... to build only Mesa on top of the 3Dfx Glide API ...

        nmake /f nmake.mak fxMesa32
              <or>
        nmake /f nmake.mak fxMesa

    ... to build only Mesa on top of the S3 Toolkit ...

        nmake /f nmake.mak s3Mesa32
              <or>
        nmake /f nmake.mak s3mesa

*** Special Notes

There are a couple of make targets in NMAKE.MIF which may or may not
work on one's system, depending upon a couple things.

No. 1 - "clean" - this target, on WindowsNT, assumes the presence of
the GNU "rm" command for recursively removing directories and files,
quietly, with wildcard matching.  To change this you need to edit the
NMAKE.MIF file and change the line that reads as follows:

	DELTREE=rm -rf

... to something more appropriate for you machine. One easy way to do
this is to change it to "deltree /y" and the copy DELTREE.EXE from a
DOS or Win95 machine into your command search path.  In either case,
whatever command is set here must be either specified with a full
drive and path name or be in your command search path, *AND* it must
take both directory and file names, with wildcard characters (e.g.:
the NT standard "DEL" command isn't good enough because it doesn't
remove the directories and the NT standard "RD" command isn't good
because it only takes one argument at a time and doesn't support
removal of files).

No. 2 - "gendiffs", "gendiffs.clr" - these targets do some automatic
diff generation, however they do require some setup and I do not
suggest using these unless you study what the build commands for them
(in NMAKE.MAK, near the bottom) actually do and ensure that they work
on your system.  These may need and assume the availability of the GNU
tar, gzip, diff, and rm commands.

No. 3 - 3dfx\demos execution problem ... 

While these project files build all versions Mesa including both
static and dynamically linked (DLL) versions of Mesa, GLU, GLUT, Aux,
and Tk.  Additionally, building of all samples, book, demo, and 3dfx
programs is completed and for the most part seem fine - only the 3dfx
programs seem to have a problem I have not had the time to run down
yet, they build fine but when executed return the following error and
do nothing else:

> Fire V1.4
> Written by David Bucciarelli (tech.hmw@plus.it)
> GLUT: Fatal Error in fire: failed to create OpenGL rendering context.

I have not yet attempted to figure out what's going on with this ...

***-> Solved?  I figured out that if the 3dfx demos are built as specified
but LINKED against the "standard" import libs (e.g.: glu32.lib,
opengl32.lib, glut32.lib) as previously generated then they will execute
just fine.  To get best performance out of them you WILL want to copy the
fxMesa32.dll file as OpenGL32.dll and put it in the same directory as the
executables.  For some reason, linking directly against "fx" builds causes
(I think) GLUT to fail when attempting to create the rendering context.

*** Revision history for ./win32 project files

1/18/98 - initial cut submitted and included with core mesa
2/5/98  - fixed internal dependency within nmake.mif upon there being
          a $(DEVDIR) variable to make some temporary batch files
          dependant upon (thanks to Keven T. McDonnell for finding
          that there was this particular bug). I also updated the
          build files for 2.6beta6.
2/8/98  - added DevStudio workspace and project files for all lib
          files and some test programs. Updated readme.win32.

